using BitMiracle.LibTiff.Classic;
using NUnit.Framework;
using SciTIF.Tests.ImageValidation;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing.Drawing2D;
using System.Formats.Asn1;
using System.IO;
using System.Linq;

namespace SciTIF.Tests;

/// <summary>
/// Test dimensions and pixel values from sample data against that generated by ImageJ (source of truth)
/// </summary>
internal class ImageValidationTests
{
    [Test]
    public void Test_ImageDatabase_ContainsEverySampleImage()
    {
        ImageDatabase db = new(SampleData.DataInfoFile);
        Assert.That(db.Count, Is.Not.Zero);

        foreach (string tifPath in SampleData.TifFiles)
        {
            string title = Path.GetFileName(tifPath);
            Assert.That(db.Infos, Contains.Key(title));
        }
    }

    [Test]
    public void Test_SampleImage_Dimensions()
    {
        ImageDatabase db = new(SampleData.DataInfoFile);

        foreach (string tifPath in SampleData.TifFiles)
        {
            ImageInfo known = db.Infos[Path.GetFileName(tifPath)];
            Image5D tif = new(tifPath);
            Assert.That(tif.Width, Is.EqualTo(known.Width));
            Assert.That(tif.Height, Is.EqualTo(known.Height));
            Assert.That(tif.Frames, Is.EqualTo(known.Frames));
            Assert.That(tif.Slices, Is.EqualTo(known.Slices));

            if (known.Channels == 1 && tif.Channels == 4)
            {
                // RGB source image with 1 channel
                // is now represented as a RGBA image with separate channels
                Assert.That(tif.Channels, Is.EqualTo(4));
            }
            else
            {
                Assert.That(tif.Channels, Is.EqualTo(known.Channels));
            }
        }
    }

    [Test]
    public void Test_SampleImage_Pixels()
    {
        ImageDatabase db = new(SampleData.DataInfoFile);

        foreach (string tifPath in SampleData.TifFiles)
        {
            ImageInfo known = db.Infos[Path.GetFileName(tifPath)];

            Image5D tif = new(tifPath);

            foreach (PixelInfo knownPixel in known.Pixels)
            {
                if (known.Depth == 24)
                {
                    double r = tif.GetImage(0, 0, 0).GetPixel(knownPixel.X, knownPixel.Y);
                    double g = tif.GetImage(0, 0, 1).GetPixel(knownPixel.X, knownPixel.Y);
                    double b = tif.GetImage(0, 0, 2).GetPixel(knownPixel.X, knownPixel.Y);
                    double a = tif.GetImage(0, 0, 3).GetPixel(knownPixel.X, knownPixel.Y);

                    double knownB = BitConverter.GetBytes((int)knownPixel.Value)[0];
                    double knownG = BitConverter.GetBytes((int)knownPixel.Value)[1];
                    double knownR = BitConverter.GetBytes((int)knownPixel.Value)[2];
                    double knownA = BitConverter.GetBytes((int)knownPixel.Value)[3];

                    Assert.That(r, Is.EqualTo(knownR));
                    Assert.That(g, Is.EqualTo(knownG));
                    Assert.That(b, Is.EqualTo(knownB));
                    Assert.That(a, Is.EqualTo(knownA));
                }
                else
                {
                    double pixelValue = tif.GetImage(0, 0, 0).GetPixel(knownPixel.X, knownPixel.Y);
                    Assert.That(pixelValue, Is.EqualTo(knownPixel.Value));
                }
            }
        }
    }

    [Test]
    public void Test_ExportSlices_5DSourceImage()
    {
        string tifFilePath = Path.Combine(SampleData.DataFolder, "C3Z4F5.tif");
        Image5D tif = new(tifFilePath);
        Assert.That(tif.Frames, Is.EqualTo(5));
        Assert.That(tif.Slices, Is.EqualTo(4));
        Assert.That(tif.Channels, Is.EqualTo(3));

        string outputFolder = Path.Combine(Path.GetTempPath(), "test-image5d");
        if (!Directory.Exists(outputFolder))
            Directory.CreateDirectory(outputFolder);

        for (int frame = 0; frame < tif.Frames; frame++)
        {
            for (int slice = 0; slice < tif.Slices; slice++)
            {
                for (int channel = 0; channel < tif.Channels; channel++)
                {
                    Image img = tif.GetImage(frame, slice, channel);
                    string saveAs = Path.Combine(outputFolder, $"test5D-F{frame}-S{slice}-C{channel}.png");
                    img.SavePng(saveAs);
                }
            }
        }
    }

}
